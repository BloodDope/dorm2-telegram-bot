from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from loguru import logger
from datetime import datetime

from config.content import ADMIN_PANEL_TEXT, STATS_TEXT
from config.settings import get_settings
from keyboards.inline_keyboards import (
    get_admin_panel_keyboard, get_admin_content_keyboard, 
    get_admin_stats_keyboard, get_broadcast_confirm_keyboard,
    get_video_management_keyboard, get_main_menu_keyboard
)
from database.database import is_admin, db

router = Router()

# States –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
class AdminStates(StatesGroup):
    waiting_for_broadcast_message = State()
    waiting_for_setting_value = State()
    waiting_for_video_upload = State()

async def check_admin_rights(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    settings = get_settings()
    return user_id in settings.admin_ids or await is_admin(user_id)

@router.message(Command("admin"))
async def admin_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å"""
    try:
        if not await check_admin_rights(message.from_user.id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        await message.answer(
            ADMIN_PANEL_TEXT,
            reply_markup=get_admin_panel_keyboard()
        )
        
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –≤–æ—à–µ–ª –≤ –ø–∞–Ω–µ–ª—å")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_command: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å.")

@router.callback_query(F.data == "admin_panel")
async def admin_panel_callback(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å"""
    try:
        if not await check_admin_rights(callback.from_user.id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        await callback.message.edit_text(
            ADMIN_PANEL_TEXT,
            reply_markup=get_admin_panel_keyboard()
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_panel_callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "admin_stats")
async def admin_stats_callback(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    try:
        if not await check_admin_rights(callback.from_user.id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_stats = await db.get_user_stats()
        feedback_stats = await db.get_feedback_stats()
        popular_sections = await db.get_popular_sections()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
        popular_text = ""
        if popular_sections:
            for i, (section, count) in enumerate(popular_sections, 1):
                section_names = {
                    "official_channel": "üì¢ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª",
                    "student_council": "üí° –°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç", 
                    "floor_chats": "üó£ –ß–∞—Ç—ã —ç—Ç–∞–∂–µ–π",
                    "general_chat": "üë• –û–±—â–∏–π —á–∞—Ç",
                    "guide_website": "üìö –°–∞–π—Ç —Å –≥–∞–π–¥–æ–º",
                    "video_guide": "üé¨ –í–∏–¥–µ–æ-–≥–∞–π–¥—ã",
                    "contacts": "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã",
                    "feedback": "üìù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"
                }
                section_name = section_names.get(section, section)
                popular_text += f"{i}. {section_name}: {count}\n"
        else:
            popular_text = "–î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç"
        
        stats_text = STATS_TEXT.format(
            total_users=user_stats.get("total_users", 0),
            active_today=user_stats.get("active_today", 0),
            active_week=user_stats.get("active_week", 0),
            active_month=user_stats.get("active_month", 0),
            popular_sections=popular_text,
            new_feedback=feedback_stats.get("new_feedback", 0),
            total_feedback=feedback_stats.get("total_feedback", 0)
        )
        
        await callback.message.edit_text(
            stats_text,
            reply_markup=get_admin_stats_keyboard()
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_stats_callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@router.callback_query(F.data == "refresh_stats")
async def refresh_stats_callback(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        if not await check_admin_rights(callback.from_user.id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        await callback.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        await admin_stats_callback(callback)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ refresh_stats_callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@router.callback_query(F.data == "admin_edit_content")
async def admin_edit_content_callback(callback: CallbackQuery):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        if not await check_admin_rights(callback.from_user.id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        text = """
üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</b>

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:

‚Ä¢ –°—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
‚Ä¢ –°—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç—ã —ç—Ç–∞–∂–µ–π
‚Ä¢ –î—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
"""
        
        await callback.message.edit_text(
            text,
            reply_markup=get_admin_content_keyboard()
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_edit_content_callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_callback(callback: CallbackQuery, state: FSMContext):
    """–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞"""
    try:
        if not await check_admin_rights(callback.from_user.id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        await state.set_state(AdminStates.waiting_for_broadcast_message)
        
        text = """
üì® <b>–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞</b>

–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b>
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –í–°–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML-—Ä–∞–∑–º–µ—Ç–∫–∞
‚Ä¢ –ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–∏–¥–µ–æ
‚Ä¢ –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel

–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
<b>–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b>
<i>–ö—É—Ä—Å–∏–≤</i>
<code>–ö–æ–¥</code>
"""
        
        await callback.message.edit_text(text)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_broadcast_callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.message(AdminStates.waiting_for_broadcast_message)
async def process_broadcast_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        if not await check_admin_rights(message.from_user.id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            await state.clear()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        broadcast_data = {
            "text": message.text,
            "message_id": message.message_id
        }
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
        if message.photo:
            broadcast_data["photo"] = message.photo[-1].file_id
            broadcast_data["caption"] = message.caption
        elif message.video:
            broadcast_data["video"] = message.video.file_id
            broadcast_data["caption"] = message.caption
        
        await state.update_data(broadcast_data=broadcast_data)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_stats = await db.get_user_stats()
        total_users = user_stats.get("total_users", 0)
        
        preview_text = f"""
üì® <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏</b>

<b>–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

<b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:</b>
{message.text or message.caption or "–ú–µ–¥–∏–∞-—Ñ–∞–π–ª"}

‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ!
"""
        
        await message.answer(
            preview_text,
            reply_markup=get_broadcast_confirm_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_broadcast_message: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏.")
        await state.clear()

@router.callback_query(F.data == "broadcast_confirm")
async def broadcast_confirm_callback(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        if not await check_admin_rights(callback.from_user.id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        data = await state.get_data()
        broadcast_data = data.get("broadcast_data")
        
        if not broadcast_data:
            await callback.answer("–î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        await callback.message.edit_text("üì® –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        async with db.db_path and db.db_path as conn:
            cursor = await conn.execute("SELECT user_id FROM users WHERE is_active = TRUE")
            users = await cursor.fetchall()
        
        sent_count = 0
        failed_count = 0
        
        for (user_id,) in users:
            try:
                if "photo" in broadcast_data:
                    await callback.bot.send_photo(
                        chat_id=user_id,
                        photo=broadcast_data["photo"],
                        caption=broadcast_data.get("caption", "")
                    )
                elif "video" in broadcast_data:
                    await callback.bot.send_video(
                        chat_id=user_id,
                        video=broadcast_data["video"],
                        caption=broadcast_data.get("caption", "")
                    )
                else:
                    await callback.bot.send_message(
                        chat_id=user_id,
                        text=broadcast_data["text"]
                    )
                sent_count += 1
            except Exception as send_error:
                failed_count += 1
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {send_error}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏
        async with db.db_path and db.db_path as conn:
            await conn.execute("""
                INSERT INTO broadcasts (admin_id, message, sent_count, failed_count, completed_at)
                VALUES (?, ?, ?, ?, ?)
            """, (
                callback.from_user.id,
                broadcast_data.get("text", "–ú–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ"),
                sent_count,
                failed_count,
                datetime.now()
            ))
            await conn.commit()
        
        result_text = f"""
‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}
‚Ä¢ –û—à–∏–±–æ–∫: {failed_count}
‚Ä¢ –û–±—â–∏–π –æ—Ö–≤–∞—Ç: {sent_count}/{sent_count + failed_count}

–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime("%H:%M:%S")}
"""
        
        await callback.message.edit_text(
            result_text,
            reply_markup=get_admin_panel_keyboard()
        )
        
        await state.clear()
        await callback.answer()
        
        logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {sent_count} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, {failed_count} –æ—à–∏–±–æ–∫")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ broadcast_confirm_callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ")
        await state.clear()

@router.callback_query(F.data == "broadcast_cancel")
async def broadcast_cancel_callback(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        await state.clear()
        await callback.message.edit_text(
            "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=get_admin_panel_keyboard()
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ broadcast_cancel_callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "admin_feedback")
async def admin_feedback_callback(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    try:
        if not await check_admin_rights(callback.from_user.id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        feedback_list = await db.get_unread_feedback()
        
        if not feedback_list:
            text = """
üí¨ <b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</b>

üì≠ –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç.

–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.
"""
        else:
            text = f"""
üí¨ <b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</b>

üì¨ –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {len(feedback_list)}

<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>
"""
            
            for feedback in feedback_list[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                username = feedback["username"] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                feedback_type = feedback["feedback_type"]
                created_at = feedback["created_at"]
                message_preview = feedback["message"][:100] + "..." if len(feedback["message"]) > 100 else feedback["message"]
                
                text += f"""

üìù <b>–û—Ç:</b> @{username} (ID: {feedback["user_id"]})
üìÖ <b>–î–∞—Ç–∞:</b> {created_at}
üè∑ <b>–¢–∏–ø:</b> {feedback_type}
üí≠ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {message_preview}
"""
        
        await callback.message.edit_text(
            text,
            reply_markup=get_admin_panel_keyboard()
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_feedback_callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")

@router.callback_query(F.data == "admin_videos")
async def admin_videos_callback(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ"""
    try:
        if not await check_admin_rights(callback.from_user.id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        text = """
üé¨ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ-–≥–∞–π–¥–∞–º–∏</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ:

–ö–∞–∂–¥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–æ 10 –≤–∏–¥–µ–æ.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: MP4, AVI, MOV
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50 –ú–ë
"""
        
        await callback.message.edit_text(
            text,
            reply_markup=get_video_management_keyboard()
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_videos_callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
@router.message(Command("cancel"))
async def cancel_admin_action(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    try:
        current_state = await state.get_state()
        if current_state:
            await state.clear()
            await message.answer(
                "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await message.answer(
                "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
                reply_markup=get_main_menu_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_admin_action: {e}")

def register_admin_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.include_router(router) 